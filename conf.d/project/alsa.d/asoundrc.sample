# 
# Author: Fulup Ar Foll
# Object: PCM hook type 
#
# Test  :  Note: Jabra_USB=hw:v1340
#  Check SoundCard  speaker-test -Dhw:v1340 -c2 -twav
#  Check MixerPCM   speaker-test -DMixerPCM -c2 -twav 
#  Check HookPCM    speaker-test -DMyNavigationHook -c2 -twav 
#  Check NavPCM     speaker-test -DMyNavPCM -c2 -twav
#  MultiMedia aplay -DDMyNavPCM /usr/share/sounds/alsa/test.wav
#
# Bug/Feature: when softvol control is initialised from plugin and not
#    from AGL binding. At 1st run ctl has invalid TLV and cannot be
#    use. Bypass Solution: 
#     * start audio-binder before playing sound (binding create control before softvol plugin)
#     * run a dummy aplay -DMyNavPCM "" to get a clean control
#
# References: https://www.spinics.net/lists/alsa-devel/msg54235.html
# --------------------------------------------------------------------

# ------------------------------------------------------
# Mixer PCM allow to play multiple stream simultaneously
# ------------------------------------------------------
pcm.FrontSeatSpeakers { 
    type dmix            
    slave {pcm "hw:v1340"}  #Jabra Solmate 1
    ipc_key 1001          # ipc_key should be unique to each dmix
} 

pcm.BackSeatSpeakers { 
    type dmix 
    slave {pcm "hw:v1340_1"}  #Jabra Solmate 2
    ipc_key 1002
} 

# -----------------------------------------------------
#  Register ControllerHookPlugin (ToiBeFix fullpath)
# -----------------------------------------------------
pcm_hook_type.CtlHookPlugin {
    install "AlsaInstallHook" 
    lib "/home/fulup/opt/lib64/policy_hook_cb.so"
}


# -------------------------------------------------------
# Define one Audio Virtual Channel per Audio Roles
# -------------------------------------------------------
pcm.MusicSoft {
    type softvol

    # Point Slave on HOOK for policies control
    slave.pcm "FrontSeatSpeakers"

    # name should match with HAL definition
    control.name  "Playback Multimedia"
}

pcm.NavSoft {
    type softvol

    # Point Slave on HOOK for policies control
    slave.pcm "FrontSeatSpeakers"

    # name should match with HAL definition
    control.name  "Playback Navigation"
}

pcm.UrgentSoft {
    type softvol

    # Point Slave on HOOK for policies control
    slave.pcm "FrontSeatSpeakers"

    # name should match with HAL definition
    control.name  "Playback Emergency"
}

# ----------------------------------------------------
# Define one hooked PCM channel per Audio Roles
# ----------------------------------------------------
pcm.Multimedia {
    type hooks
    slave {pcm "MusicSoft"}
    hooks.0 {
        comment "Defined used hook sharelib and provide arguments/config to install func"
        type "CtlHookPlugin"
        hook_args {
            verbose true # print few log messages (default false);
            # Every Call should return OK in order PCM to open (default timeout 100ms)
            uri  "ws://localhost:1234/api?token='audio-agent-token'"
            request.control {
                    api    "control"
                    verb   "dispatch"
	            query  "{'target':'Multimedia'}"
            }
            event {    # map event reception to self generated signal
                pause  30
                resume 31
                stop   3
            }
        }
    }
}

pcm.Navigation {
    type hooks
    slave {pcm "NavSoft"}
    hooks.0 {
        comment "Defined used hook sharelib and provide arguments/config to install func"
        type "CtlHookPlugin"
        hook_args {
            verbose true # print few log messages (default false);
            # Every Call should return OK in order PCM to open (default timeout 100ms)
            uri   "ws://localhost:1234/api?token='audio-agent-token'"
            request.control {
                    api    "control"
                    verb   "dispatch"
	            query  "{'target':'Navigation'}"
            }
        }
    }
}

# Define a HookedPCM that point to Hook_type sharelib
# ----------------------------------------------------
pcm.Emergency {
    type hooks
    slave {pcm "UrgentSoft"}
    hooks.0 {
        comment "Defined used hook sharelib and provide arguments/config to install func"
        type "CtlHookPlugin"
        hook_args {
            verbose true # print few log messages (default false);

            # Every Call should return OK in order PCM to open (default timeout 100ms)
            uri   "ws://localhost:1234/api?token='audio-agent-token'"
            request.control {
                    api    "control"
                    verb   "dispatch"
	            query  "{'target':'Emergency'}"
            }
        }
    }
}

